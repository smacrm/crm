<?xml version='1.0' encoding='UTF-8' ?>
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:p="http://primefaces.org/ui"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:c="http://java.sun.com/jsp/jstl/core"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:a="http://xmlns.jcp.org/jsf/passthrough">
    <h:form onkeypress="if (event.keyCode === 13 &amp;&amp; $(event.target).prop('tagName') !== 'TEXTAREA') { return false; }" prependId="false">
        <style>
        #drop-panel i.fa-times-circle {
            font-size: 18px;
            cursor: pointer;
        }
        #drop-panel li label{
            margin-right: 15px;
        }
        #drop-panel li span i{
            margin-right: 15px;
        }
        #drop-panel .list-group-item[require="true"] {
            position: relative;
        }
        #drop-panel .list-group-item.list-group-item-success.disabled{
            color: #3c763d;
            background-color: #dff0d8;
        }
        #drop-panel .list-group-item[require="true"]:before {
            content: "*";
            position: absolute;
            left: 5px;
            color: red;
            top: 10px;
            font-size: 1.5em;
        }
        #drop-panel .list-group-item-tab{
            border-left: 3px solid #00c0ef;
            padding-left: 30px;
        }
        .select-condition-multiple{
            width: 80%;
        }
        #box-conditions .condition-row{
            margin-bottom: 7px;
        }
        #box-conditions label{
            margin-right: 10px;
        }
        #box-conditions .condition-row > .btn-add-condition{
            display: none;
        }
        #box-conditions .condition-row:first-child > .btn-add-condition{
            display: inline-block;
        }
        #box-conditions .condition-row:first-child > .btn-remove-condition{
            display: none;
        }
        .modal-backdrop{
            z-index: 1000;
        }
        .modal{
            z-index: 1001;
        }
    </style>
        <h:outputScript>
            function startProgressBar(spinElm) {
                PF('pbAjax').start();
                $.blockUI({ css: { padding: '10px'}, message: $('#pbAjax')});
            }
            function finishProgressBar(spinElm) {
                PF('pbAjax').setValue(100);
                $.unblockUI();
            }
        </h:outputScript>
        
        <p:inputText value="#{IssueExecuteImport.strMappingField}" styleClass="hide mapping-fields"/>
        <h:panelGrid width="100%" styleClass="page-header" style="margin: 0;padding: 0;">
            <f:facet name="header">
                <!-- Content Header (Page header) -->
                <div class="row">
                    <div class="col-md-6">
                        <h1>#{msg['label.import']}</h1>
                    </div>
                    <div class="col-md-6 text-right">
                        <p:commandButton value="${msg['label.back']}" actionListener="#{projectController.reload()}"
                            icon="fa fa-chevron-circle-left" update="mainContent" onstart="start()" onsuccess="finish()">
                            <f:param name="force" value="true"/>
                        </p:commandButton>
                        <p:remoteCommand name="cmdIssueExcelImport" actionListener="#{IssueExecuteImport.doImportData}" 
                                         onstart="startProgressBar()" onsuccess="finishProgressBar()">
                            <f:param name="force" value="true"/>
                        </p:remoteCommand>
                        <p:commandButton value="${msg['label.save']}" icon="fa fa-cloud-upload" type="button" onclick="doIssueExcelImport()">
                            <f:param name="force" value="true"/>
                        </p:commandButton>
                    </div>
                </div>
            </f:facet>
        </h:panelGrid>
        <p:spacer width="100" height="5" />
        <div class="hide">
            <p:commandButton id="moveToIssueList" styleClass="hide" actionListener="#{IssueExecuteImport.onImportComplete()}" update="mainContent, :growl" oncomplete="try{$('.modal-backdrop').remove();}catch(e){}">
                <f:param name="force" value="true"/>
                <f:param name="menuClick" value="1"/>
            </p:commandButton>
            <p:progressBar id="pbAjax" widgetVar="pbAjax" interval="1500" value="#{IssueExecuteImport.progress}" ajax="true"
                           labelTemplate="{value} % #{issue['label.of']} #{issueImportController.maxRow}" style="height: 20px !important;">
                <p:ajax event="complete" onstart="$('#moveToIssueList').trigger('click')"/>
            </p:progressBar>
        </div>
        <p:outputPanel styleClass="box" transient="true">
            <div class="box-body flex flex_1_1 flex_column">
                <div class="box box-solid box-search no-padding no-border" id="box-conditions" style="overflow: visible">
                    <div class="box-header with-border" data-widget="collapse">
                        <h3 class="box-title">#{issue['label.import.condition']}</h3>
                        <div class="box-tools pull-right">
                            <button type="button" class="btn btn-box-tool" data-widget="collapse"><i class="fa fa-plus"></i></button>
                        </div>
                    </div>
                    <div class="box-body padding-10">
                        <div class="row">
                            <div class="col-md-7">
                                <ul class="list-unstyled">
                                    <li class="condition-row">
                                        <label>#1</label>
                                        <select class="select-condition-multiple" multiple="multiple">
                                        <c:forEach items="#{issueImportController.availableColumns}" var="entry">
                                            <c:if test="#{issueImportController.isSelectHeader(entry.id)}">
                                                <option value="#{entry.id}" disabled="true" style="display: none">
                                                    <h:outputLabel value="#{entry.name}"></h:outputLabel>
                                                </option>
                                            </c:if>
                                            <c:if test="#{not issueImportController.isSelectHeader(entry.id)}">
                                                <option value="#{entry.id}" style="display: none">
                                                    <h:outputLabel value="#{entry.name}"></h:outputLabel>
                                                </option>
                                            </c:if>

                                        </c:forEach>
                                        </select>
                                        <button class="btn btn-xs btn-success btn-add-condition" type="button">
                                            <i class="fa fa-plus-circle"></i>
                                        </button>
                                        <button class="btn btn-xs btn-danger btn-remove-condition" type="button">
                                            <i class="fa fa-minus-circle"></i>
                                        </button>
                                    </li>
                                </ul>
                            </div>
                            <div class="col-md-5">
                                <div class="panel panel-default">
                                    <div class="panel-body">
                                        <div class="checkbox no-margin">
                                            <label>
                                                <input type="checkbox" class="settings" ref="report_content_type" value="minified" checked="true"/> #{issue['label.import.output.erroronly']}
                                            </label>
                                        </div>
                                        <div class="radio no-margin" style="padding-left: 20px">
                                            <label>
                                                <input type="radio" name="report_file_type" class="settings" ref="report_file_type" value="csv"/> #{issue['label.import.output.type.csv']}
                                            </label>
                                            <label>
                                                <input type="radio" name="report_file_type" class="settings" ref="report_file_type" value="xls" checked="true"/>  #{issue['label.import.output.type.xls']}
                                            </label>
                                        </div>
                                        <div class="radio no-margin">
                                            <label>
                                                <input type="radio" name="report_customer_import_type" class="settings" ref="cust_import_type" value="keep" checked="true"/> #{issue['label.import.setting.keep_customer']}
                                            </label>
                                            <label>
                                                <input type="radio" name="report_customer_import_type" class="settings" ref="cust_import_type" value="remove"/>  #{issue['label.import.setting.remove_customer']}
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="">
                    <div class="col-md-6">
                        <h4>#{issue['label.import.file']}
                            <button class="btn btn-xs btn-success pull-right" id="matching-fields" type="button">
                                #{issue['label.import.mapping']}
                                <i class="fa fa-arrow-circle-right"></i>
                            </button>
                        </h4>
                    </div>
                    <div class="col-md-6">
                        <h4>
                            <p:spacer width="10"/>#{issue['label.system']}
                            <button class="btn btn-xs btn-warning pull-left" id="revert-fields" type="button">
                                <i class="fa fa-arrow-circle-left"></i>
                                #{issue['label.import.revert']}
                            </button>
                        </h4>
                    </div>
                </div>
                <div class="flex flex_1_1">
                    <div class="col-md-6 flex_1_1" id="drag-panel" style="overflow-x: hidden; overflow-y: auto; position: static">
                        <ul class="list-group" id="sortable">
                            <c:forEach items="#{issueImportController.uploadHeaders}" var="entry">
                                <li class="list-group-item" key="#{entry.key}">
                                    <h:outputLabel value="#{entry.value}"></h:outputLabel>
                                    <button class="btn btn-xs btn-success pull-right matching-field" type="button">
                                        #{issue['label.import.mapping.item']}
                                        <i class="fa fa-arrow-circle-right"></i>
                                    </button>
                                </li>
                            </c:forEach>
                        </ul>
                    </div>
                    <div class="col-md-6 flex_1_1 overflow_auto" id="drop-panel">
                        <ul class="list-group">
                            <c:forEach items="#{issueImportController.availableColumns}" var="entry">
                                <c:if test="#{entry.id ne 'issue_receive_person_group_name'}">
                                    <li class="list-group-item #{issueImportController.isSelectHeader(entry.id) ? 'disabled' : 'droppable'} #{not empty entry.tabId ? 'list-group-item-tab' : ''}" key="#{entry.id}" require="#{entry.required}">
                                        <h:outputLabel value="#{entry.name}"></h:outputLabel>
                                        <span></span>
                                    </li>
                                </c:if>
                            </c:forEach>
                        </ul>
                    </div>
                </div>
            </div>
        </p:outputPanel>
        <div class="modal fade" tabindex="-1" role="dialog" id="required-fields">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">#{issue['label.import.required']}</h4>
                    </div>
                    <div class="modal-body">
                        <p:panelGrid styleClass="panelGrid_topBase panelGrid_td_line_height" style="width: 100%;" transient="true">
                            <c:forEach items="#{issueImportController.availableColumns}" var="entry">
                                <p:row rendered="#{entry.required}" style="border: 0;">
                                    <p:column styleClass="td_10"><h:outputLabel value="#{entry.name}" /></p:column>
                                    <p:column styleClass="td_15">
                                        <p:outputPanel a:ref="#{entry.id}">
                                            <c:choose>
                                                <c:when test="#{entry.id eq 'issue_receive_person_name' or entry.id eq 'issue_creator_name'}">
                                                    <p:commandButton id="issueReceivePersonList#{entry.id}" type="button" icon="fa fa-th" />
                                                    <label id="label_#{entry.id}"></label>
                                                    <p:tieredMenu
                                                        id="#{entry.id}"
                                                        trigger="issueReceivePersonList#{entry.id}"
                                                        overlay="true"
                                                        my="left top"
                                                        at="left bottom"
                                                        a:ref="#label_#{entry.id}"
                                                        model="#{issueController.selects.get(entry.id.replaceAll('_name' , '_id'))}"/>
                                                </c:when>
                                                <c:when test="#{entry.id eq 'issue_status_name' or entry.id eq 'issue_public_name' or entry.id eq 'issue_proposal_name_1'}">
                                                    <p:selectOneMenu id="#{entry.id}" editable="true"
                                                                       converter="gnext.converter.smart">
                                                        <f:selectItems value="#{issueImportController.filterLevel(1, issueController.select.get(entry.id.replaceAll('_name' , '_id').replaceAll('_1', '')))}"/>
                                                    </p:selectOneMenu>
                                                </c:when>
                                                <c:when test="#{entry.id eq 'issue_receive_date' or entry.id eq 'issue_created_time'}">
                                                    <p:calendar
                                                        id="#{entry.id}"
                                                        locale="#{loginController.member.locale}"
                                                        pattern="yyyy/MM/dd HH:mm"
                                                        showOn="button"
                                                        styleClass="input_datetime">
                                                        <f:validator validatorId="gnext.validator.RequiredValidator" />
                                                        <f:attribute name="title" value="#{issue['label.issue_receive_date']}"/>
                                                    </p:calendar>
                                                </c:when>
                                            </c:choose>
                                        </p:outputPanel>
                                    </p:column>
                                </p:row>
                            </c:forEach>
                        </p:panelGrid>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-default" data-dismiss="modal">#{msg['label.back']}</button>
                        <button type="button" class="btn btn-sm btn-primary" onclick="doIssueExcelImport()">#{msg['label.update']}</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <div class="modal fade" tabindex="-1" role="dialog" id="conditions-blank-alert">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">#{issue['label.import.cond.required.alert']}</h4>
                    </div>
                    <div class="modal-body">
                        <p class="text-danger"><h:outputText value="#{issue['label.import.cond.required.alertcontent']}" escape="false" /></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-sm btn-default" data-dismiss="modal">#{msg['label.back']}</button>
                        <button type="button" class="btn btn-sm btn-primary" onclick="forceIssueExcelImport()">#{msg['label.accept']}</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <h:outputScript library="js" name="issue_import.js"/>
        <h:outputScript library="js" name="search-filter.js"/>
        <h:outputScript>
            var alertNoCondition = true;
            function forceIssueExcelImport(){
                alertNoCondition = false;
                doIssueExcelImport();
            }
            function doIssueExcelImport(){
                var allow = true, allowCustomize = true;
                var customizeIdList = [];
                var mappingConds = [];
                
                $('#conditions-blank-alert').modal('hide');
                
                $('#required-fields tr[role=row]').hide();
                $('#drop-panel .list-group-item[require="true"]').each(function(){
                    if(!$(this).hasClass('list-group-item-success')){
                        $('#required-fields [ref="'+ $(this).attr('key')+'"]').closest('tr').show();
                        customizeIdList.push($(this).attr('key'));
                        allow = false;
                    }
                });
                
                $.each(customizeIdList, function(idx, it){
                    var val = $('#required-fields tr[role=row] [ref="'+it+'"] input:last').val()
                    if(!val){
                        val = $('#required-fields tr[role=row] [ref="'+it+'"] label:first').text()
                    }
                    if(!val){
                        allowCustomize = false;
                    }else{
                        mappingConds.push({name: it, value: val});
                    }
                });
                
                allow = allow || allowCustomize;
                
                if(allow){
                    var hasCond = false;
                    if(alertNoCondition){
                        $('.select-condition-multiple').each(function(){
                            if($(this).val() &amp;&amp; $(this).val().length > 0){
                                hasCond = true;
                            }
                        });
                    }
                    if(alertNoCondition === false || hasCond === true){
                        $('.select-condition-multiple').each(function(index){
                            if($(this).val() &amp;&amp; $(this).val().length > 0){
                                mappingConds.push({name: 'mapping_conditions_' + index, value: $(this).val()});
                            }
                        });
                        $('input.settings:checked').each(function(index){
                            var key = $(this).attr('ref');
                            mappingConds.push({name: key, value: $(this).val()});
                        });
                        cmdIssueExcelImport(mappingConds);
                    }else{
                        $('#required-fields').modal('hide');
                        $('#conditions-blank-alert').modal({backdrop: 'static'});
                    }
                }else{
                    showWarning("#{issue['label.import.required']}");
                    $('#required-fields').modal({backdrop: 'static'});
                }
            }
            $(document).ready(function(){
                $('.select-condition-multiple').select2();
                $('#box-conditions').on('click', '.btn-add-condition', function(){
                    
                    var ul = $(this).closest('ul');
                    if(ul.find('li.condition-row').length &lt; 5){
                        var elm = $(this).closest('li').clone();
                        elm.find('.select2').remove();
                        elm.find('.select2-hidden-accessible').removeClass('select2-hidden-accessible');
                        elm.appendTo(ul);
                        elm.find('label').text("#"+ul.find('.select-condition-multiple').length);
                        elm.find('.select-condition-multiple').select2();
                    }else{
                        showWarning("#{issue['label.import.cond.max']}")
                    }
                });
                
                $('#box-conditions').on('click', '.btn-remove-condition', function(){
                    var elm = $(this).closest('li');
                    var ul = $(this).closest('ul');
                    elm.remove();
                    ul.find('.condition-row').each(function(index){
                        $(this).find('label:first').text("#"+(index+1));
                    });
                });
                
                $('.settings[ref="report_content_type"]').change(function(){
                    if(!$(this).is(':checked')){
                        $('.settings[ref="report_file_type"]').attr("disabled", true);
                    }else{
                        $('.settings[ref="report_file_type"]').removeAttr("disabled");
                    }
                });
                $('.settings[ref="report_content_type"]').trigger('change');
            });
        </h:outputScript>
    </h:form>
</ui:composition>